// <auto-generated />
using System;
using FinalProjectLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProjectLibrary.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20250515195832_SeedRoomDirections")]
    partial class SeedRoomDirections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnemyEnemyAbility", b =>
                {
                    b.Property<int>("EnemiesId")
                        .HasColumnType("int");

                    b.Property<int>("EnemyAbilitiesId")
                        .HasColumnType("int");

                    b.HasKey("EnemiesId", "EnemyAbilitiesId");

                    b.HasIndex("EnemyAbilitiesId");

                    b.ToTable("EnemyEnemyAbility");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("EnemyAbilities");

                    b.HasDiscriminator<string>("Type").HasValue("EnemyAbility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.PlayerAbilities.PlayerAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("PlayerAbilities");

                    b.HasDiscriminator<string>("Type").HasValue("PlayerAbility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Enemy.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackPower")
                        .HasColumnType("int");

                    b.Property<string>("EnemyType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Enemies");

                    b.HasDiscriminator<string>("EnemyType").HasValue("Enemy");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EquippedId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquippedId");

                    b.HasIndex("RoomId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RoomId");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Type").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Rooms.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DownId")
                        .HasColumnType("int");

                    b.Property<int?>("EastId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NorthId")
                        .HasColumnType("int");

                    b.Property<int?>("SouthId")
                        .HasColumnType("int");

                    b.Property<int?>("UpId")
                        .HasColumnType("int");

                    b.Property<int?>("WestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DownId");

                    b.HasIndex("EastId");

                    b.HasIndex("NorthId");

                    b.HasIndex("SouthId");

                    b.HasIndex("UpId");

                    b.HasIndex("WestId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("PlayerPlayerAbility", b =>
                {
                    b.Property<int>("PlayerAbilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.HasKey("PlayerAbilitiesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("PlayerPlayerAbility");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.EnemyAbilities.Fall", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility");

                    b.HasDiscriminator().HasValue("Fall");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.EnemyAbilities.Finisher", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility");

                    b.HasDiscriminator().HasValue("Finisher");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.EnemyAbilities.Grapple", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility");

                    b.HasDiscriminator().HasValue("Grapple");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.EnemyAbilities.TakeAKnee", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility");

                    b.HasDiscriminator().HasValue("TakeAKnee");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.EnemyAbilities.TongueWhip", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility");

                    b.HasDiscriminator().HasValue("TongueWhip");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.PlayerAbilities.KneeKick", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.PlayerAbilities.PlayerAbility");

                    b.HasDiscriminator().HasValue("KneeKick");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.PlayerAbilities.Roundhouse", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.PlayerAbilities.PlayerAbility");

                    b.HasDiscriminator().HasValue("Roundhouse");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Abilities.PlayerAbilities.Stab", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Abilities.PlayerAbilities.PlayerAbility");

                    b.HasDiscriminator().HasValue("Stab");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Enemy.Licker", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Characters.Enemy.Enemy");

                    b.HasDiscriminator().HasValue("Licker");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Enemy.Tyrant", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Characters.Enemy.Enemy");

                    b.Property<int>("StunThreshold")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Tyrant");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Enemy.Zombie", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Characters.Enemy.Enemy");

                    b.HasDiscriminator().HasValue("Zombie");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Items.FirstAid", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Equipments.Item");

                    b.Property<int>("Healing")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("FirstAid");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Items.KeyItem", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Equipments.Item");

                    b.Property<bool>("WasUsed")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("KeyItem");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Items.Weapon", b =>
                {
                    b.HasBaseType("FinalProjectLibrary.Models.Equipments.Item");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DamageOverTime")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("EnemyEnemyAbility", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Characters.Enemy.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProjectLibrary.Models.Abilities.EnemyAbilities.EnemyAbility", null)
                        .WithMany()
                        .HasForeignKey("EnemyAbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Enemy.Enemy", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "Room")
                        .WithMany("Enemies")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Players.Player", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Equipments.Items.Weapon", "Equipped")
                        .WithMany()
                        .HasForeignKey("EquippedId");

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "Room")
                        .WithMany("Players")
                        .HasForeignKey("RoomId");

                    b.Navigation("Equipped");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Inventory", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Characters.Players.Player", "Player")
                        .WithOne("Inventory")
                        .HasForeignKey("FinalProjectLibrary.Models.Equipments.Inventory", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Item", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Equipments.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "Room")
                        .WithMany("Items")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Inventory");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Rooms.Room", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "Down")
                        .WithMany()
                        .HasForeignKey("DownId");

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "East")
                        .WithMany()
                        .HasForeignKey("EastId");

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "North")
                        .WithMany()
                        .HasForeignKey("NorthId");

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "South")
                        .WithMany()
                        .HasForeignKey("SouthId");

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "Up")
                        .WithMany()
                        .HasForeignKey("UpId");

                    b.HasOne("FinalProjectLibrary.Models.Rooms.Room", "West")
                        .WithMany()
                        .HasForeignKey("WestId");

                    b.Navigation("Down");

                    b.Navigation("East");

                    b.Navigation("North");

                    b.Navigation("South");

                    b.Navigation("Up");

                    b.Navigation("West");
                });

            modelBuilder.Entity("PlayerPlayerAbility", b =>
                {
                    b.HasOne("FinalProjectLibrary.Models.Abilities.PlayerAbilities.PlayerAbility", null)
                        .WithMany()
                        .HasForeignKey("PlayerAbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProjectLibrary.Models.Characters.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Characters.Players.Player", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Equipments.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FinalProjectLibrary.Models.Rooms.Room", b =>
                {
                    b.Navigation("Enemies");

                    b.Navigation("Items");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
